const TelegramApi = require("node-telegram-bot-api");

require("dotenv").config();

const { connection, userState } = require("./module/conectionDb");

const { search } = require("./module/options");

const { auth } = require("./module/auth");

const { main } = require("./module/reportKaspi");

const { log, reportLocation, formatDate } = require("./module/plugin");

const {
  searchByName,
  searchPayment,
  searchCheap,
  searchByUser,
  searchByWm,
} = require("./module/sqlQuery");

const token = process.env.TOKEN_BOT;

const bot = new TelegramApi(token, { polling: true });

bot.on("message", async (msg) => {
  const text = msg.text;
  const chatId = msg.chat.id;
  const name = auth[chatId] ? auth[chatId].name : "Unknown";

  try {
    if (auth[chatId]) {
      if (text === "/start" || text === "üîç –ø–æ–∏—Å–∫") {
        const currentDateTime = new Date();
        const formattedDateTime = formatDate(currentDateTime);
        delete userState[chatId];
        console.log(name + " –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ " + formattedDateTime);
        await bot.sendMessage(
          498318670,
          name + " –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ " + formattedDateTime
        );
        await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", search);
      } else if (text === `/report`) {
        delete userState[chatId];
        userState[chatId] = { state: "report" };
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞");
      } else if (text === `/kaspi` && chatId === 498318670) {
        delete userState[chatId];
        await main(chatId, connection, bot);
      } else if (text === `üîç –ø–æ –ª/—Å`) {
        delete userState[chatId];
        userState[chatId] = { state: "searchbyuser" };
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ª/—Å:", search);
      } else if (text === `üîç –ø–æ –≤–º`) {
        delete userState[chatId];
        userState[chatId] = { state: "searchwm" };
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤/–º:", search);
      } else if (text === `üîç –ø–æ —Ñ–∏–æ`) {
        delete userState[chatId];
        userState[chatId] = { state: "searchbyname" };
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–æ", search);
      } else if (text === `üí∏ –ø–ª–∞—Ç–µ–∂–∏`) {
        return searchPayment(chatId, userState, bot);
      } else if (text === `üìã –ø–æ–∫–∞–∑–∞–Ω–∏–π`) {
        return searchCheap(chatId, userState, bot);
      } else if (
        userState[chatId] &&
        userState[chatId].state === "searchbyuser"
      ) {
        const type = "–ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç";
        console.log(name + " –õ/—Å: " + text);
        await bot.sendMessage(498318670, name + " –õ/—Å: " + text);
        log(chatId, name, text, type);
        return searchByUser(chatId, text, bot);
      } else if (userState[chatId] && userState[chatId].state === "searchwm") {
        const type = "–Ω–æ–º–µ—Ä –≤–æ–¥–æ–º–µ—Ä–∞";
        console.log(name + " –í/–º: " + text);
        await bot.sendMessage(498318670, name + " –í/–º: " + text);
        log(chatId, name, text, type);
        return searchByWm(chatId, text, bot);
      } else if (
        userState[chatId] &&
        userState[chatId].state === "searchbyname"
      ) {
        const type = "—Ñ–∏–æ";
        console.log(name + " –§–ò–û: " + text);
        await bot.sendMessage(498318670, name + " –§–ò–û: " + text);
        log(chatId, name, text, type);
        return searchByName(chatId, text, bot);
      } else if (userState[chatId] && userState[chatId].state === "report") {
        return reportLocation(chatId, text, bot, connection, userState);
      } else {
        await bot.sendMessage(
          chatId,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
        );
      }
    } else {
      await bot.sendMessage(chatId, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    }
  } catch (e) {
    console.error(e);
    return bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞!");
  }
});

bot.on("callback_query", (query) => {
  const data = query.data;
  const chatId = query.message.chat.id;
  try {
    if (auth[chatId]) {
      if (data.startsWith("searchUser_")) {
        const searchValue = data.split("_")[1];
        searchByUser(chatId, searchValue, bot);
      }
    } else {
      bot.sendMessage(chatId, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
    }
  } catch (error) {
    console.error(error);
    return bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞!");
  }
});

bot.on("polling_error", (error) => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", error);
});

console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.");
