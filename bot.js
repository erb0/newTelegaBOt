const { Telegraf } = require('telegraf')
require('dotenv').config()
const { connectToDatabase, User, Log, Photo } = require('./modules/mongoDb')
const { search, clear } = require('./modules/button')
const path = require('path')
const axios = require('axios')
const { createClient } = require('@supabase/supabase-js')
const {
  connection,
  parseObjText,
  locationCodes,
} = require('./modules/accessDb')
const { didntPay } = require('./modules/reports/didntPay')
const { main } = require('./modules/reports/reportKaspi')
const {
  searchByName,
  searchPayment,
  searchCheap,
  searchByUser,
  searchByWm,
  back,
} = require('./modules/sqlInfo')
const {
  userInfoForInsert,
  wcodeInfoForInsert,
  insertValue,
  insertIfYes,
} = require('./modules/sqlInsert')
const { exportMongoLogsToExcel } = require('./modules/plugin')

const { authChatId, auth } = require('./modules/auth')

connectToDatabase()

function botStart() {
  const SUPABASE_URL = process.env.SUPABASE_URL
  const SUPABASE_KEY = process.env.SUPABASE_KEY
  const BUCKET_NAME = process.env.BUCKET_NAME
  const token = process.env.TELEGRAM_TOKEN
  const bot = new Telegraf(token)
  const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)
  async function safeReply(ctx, ...args) {
    try {
      await ctx.replyWithHTML(...args)
    } catch (error) {
      if (error.response && error.response.error_code === 403) {
        console.log(`User ${ctx.from.id} blocked the bot.`)
      } else {
        console.error(`Failed to send message to ${ctx.from.id}:`, error)
      }
    }
  }

  const ensureAuth = async (ctx, next) => {
    if (!authChatId[ctx.from.id]) return ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
    return next()
  }

  const stateHandlers = {
    didntPay: async (text, ctx) => {
      await didntPay(text, ctx, connection)
    },
    list: async (text, ctx) => {
      const message = parseObjText(locationCodes, text)
      if (!message.trim()) return safeReply(ctx, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
      const parts = message.match(/.{1,4000}(\n|$)/g)
      for (const part of parts) await safeReply(ctx, part)
    },
    searchbyuser: async (text, ctx, user) => {
      const codes = authChatId[user.user_id]?.section
      if (!codes) return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
      const codeArray = codes.map((v) => `'${v}'`).join(',')
      searchByUser(codeArray, text, ctx, User)
    },
    searchwm: (text, ctx) => searchByWm(text, ctx),
    searchbyname: (text, ctx) => searchByName(text, ctx),
    insertConscode: (text, ctx, user) =>
      userInfoForInsert(user.user_id, text, ctx, User),
    insertValue: (text, ctx, user) =>
      insertValue(user.user_id, text, ctx, User),
  }

  bot.command('start', async (ctx) => {
    if (!authChatId[ctx.from.id]) return ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
    await safeReply(
      ctx,
      `–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name || 'unknown'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/info - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–π –æ–± –∞–±–æ–Ω–µ–Ω—Ç–∞—Ö
/insert - –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
/list - –ö–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤
/didntpay - –°–ø–∏—Å–∫–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–¥—É –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞`
    )

    let user = await User.findOne({ user_id: ctx.from.id })
    if (!user) {
      user = new User({
        user_id: ctx.from.id,
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
        language_code: ctx.from.language_code,
        state: 'start',
        privileges: 'user',
        created_at: new Date(),
      })
      await user.save()
    } else {
      await User.updateOne({ user_id: ctx.from.id }, { state: 'start' })
    }
  })

  bot.command('didntpay', ensureAuth, async (ctx) => {
    await safeReply(ctx, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞.\n*–∫–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤ /list`)
    await User.updateOne({ user_id: ctx.from.id }, { state: 'didntPay' })
  })

  bot.command('info', ensureAuth, async (ctx) => {
    await safeReply(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞', search)
  })

  bot.command('list', ensureAuth, async (ctx) => {
    await safeReply(
      ctx,
      '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ–ª—å—Å–∫–æ–≥–æ –æ–∫—Ä—É–≥–∞.'
    )
    await User.updateOne({ user_id: ctx.from.id }, { state: 'list' })
  })

  bot.command('insert', ensureAuth, async (ctx) => {
    const chatId = ctx.chat.id
    await safeReply(
      ctx,
      `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <i><b>${authChatId[chatId].name}</b></i>`
    )
    await User.updateOne({ user_id: ctx.from.id }, { state: 'insertConscode' })
    await safeReply(
      ctx,
      '–í–≤–µ–¥–∏—Ç–µ –ª/—Å –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤!',
      clear()
    )
  })

  bot.command('kaspi', async (ctx) => {
    if (ctx.chat.id !== 498318670)
      return await safeReply(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
    await main(ctx.chat.id, connection, bot)
  })

  bot.command('mongo', async (ctx) => {
    if (ctx.chat.id !== 498318670)
      return await safeReply(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
    await exportMongoLogsToExcel(Log, ctx)
  })

  bot.on('text', async (ctx) => {
    const userId = ctx.from.id
    const text = ctx.message.text
    if (!authChatId[userId]) return ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')

    const user = await User.findOne({ user_id: userId })
    const state = user?.state

    const buttonActions = {
      'üîç –ø–æ –ª/—Å': { state: 'searchbyuser', msg: '–í–≤–µ–¥–∏—Ç–µ –ª/—Å:' },
      'üîç –ø–æ –≤–º': { state: 'searchwm', msg: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤/–º:' },
      'üîç –ø–æ —Ñ–∏–æ': { state: 'searchbyname', msg: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–æ:' },
    }

    if (buttonActions[text]) {
      const { state, msg } = buttonActions[text]
      await safeReply(ctx, msg, search)
      await User.updateOne({ user_id: userId }, { state })
      return
    }

    if (stateHandlers[state]) {
      try {
        await stateHandlers[state](text, ctx, user)
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${state}:`, e)
        await safeReply(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.')
      }
    } else {
      await safeReply(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É....')
    }
  })

  // ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ====
  bot.on('photo', async (ctx) => {
    try {
      const file = ctx.message.photo.pop()
      const fileId = file.file_id
      const fileLink = await ctx.telegram.getFileLink(fileId)

      const conscode = '123456' // ‚Üê –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const now = new Date()
      const fileName = `${conscode}_${now
        .toLocaleDateString('ru-RU')
        .replace(/\//g, '.')}.jpg`

      const response = await axios.get(fileLink.href, {
        responseType: 'arraybuffer',
      })

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Supabase
      const { data, error } = await supabase.storage
        .from(BUCKET_NAME)
        .upload(`meters/${fileName}`, response.data, {
          contentType: 'image/jpeg',
          upsert: true,
        })

      if (error) {
        console.error('–û—à–∏–±–∫–∞ Supabase:', error)
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ')
      }

      const { data: publicUrl } = supabase.storage
        .from(BUCKET_NAME)
        .getPublicUrl(`meters/${fileName}`)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
      await Photo.create({
        chatId: ctx.chat.id,
        name: ctx.message.from.first_name,
        CONSCODE: conscode,
        photoUrl: publicUrl.publicUrl,
        date: now,
      })

      ctx.reply('‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞:', err)
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ')
    }
  })

  bot.action('payments', ensureAuth, (ctx) => searchPayment(User, ctx))
  bot.action('cheap', ensureAuth, (ctx) => searchCheap(User, ctx))
  bot.action('back', ensureAuth, (ctx) => back(User, ctx))

  bot.action(/searchUser_(.+)/, ensureAuth, async (ctx) => {
    const text = ctx.match[1]
    const codes = authChatId[ctx.from.id]?.section
    if (!codes) return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
    const codeArray = codes.map((v) => `'${v}'`).join(',')
    searchByUser(codeArray, text, ctx, User)
    await User.updateOne({ user_id: ctx.from.id }, { state: 'info' })
  })

  bot.action(/^wcode_/, (ctx) => wcodeInfoForInsert(ctx, User))
  bot.action('yes', async (ctx) => {
    await ctx.deleteMessage()
    insertIfYes(ctx, User)
  })
  bot.action('restart', async (ctx) => {
    const userId = ctx.chat.id
    await ctx.deleteMessage()
    await User.updateOne({ user_id: userId }, { state: 'insertConscode' })
    await safeReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –ª/—Å!')
  })

  console.log('Bot have been started successfully.')
  return bot
}

module.exports = botStart
