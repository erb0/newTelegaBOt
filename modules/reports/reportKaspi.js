const XLSX = require("xlsx");
const nodemailer = require("nodemailer");

async function executeQuery(chatId, connection, ctx) {
  try {
    await ctx.telegram.sendMessage(chatId, "üïí –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å...");
    const data = await connection.query(`SELECT * FROM 1_sqlQueryForKaspi`);
    ctx.telegram.sendMessage(chatId, "–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!");
    return data;
  } catch (err) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${err}`);
  }
}

function createExcelFile(data, chatId, ctx) {
  const wsData = data.map((row) => Object.values(row));
  const ws = XLSX.utils.aoa_to_sheet([Object.keys(data[0])].concat(wsData));
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "–õ–∏—Å—Ç1");
  const date = new Date().toISOString().split("T")[0].replace(/-/g, "_");
  const filePath = `./modules/KASPI/kaspi_${date}.xlsx`;
  XLSX.writeFile(wb, filePath, { compression: true });
  ctx.telegram.sendMessage(chatId, "–§–∞–π–ª —ç–∫—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω!");

  return filePath;
}

async function sendEmail(filePath, chatId, ctx) {
  try {
    const transporter = nodemailer.createTransport({
      service: "mail.ru",
      auth: {
        user: "too2006@mail.ru",
        pass: "sY5Myr1HqsDDV7m14hba",
      },
    });
    // const transporter = nodemailer.createTransport({
    //   service: "mail.ru",
    //   auth: {
    //     user: "too2006@mail.ru",
    //     pass: "sY5Myr1HqsDDV7m14hba",
    //   },
    //   tls: {
    //     rejectUnauthorized: false,
    //   },
    //   socketTimeout: 300000, // –¢–∞–π–º–∞—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
    //   connectionTimeout: 300000, // –¢–∞–π–º–∞—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
    //   greetingTimeout: 300000, // –¢–∞–π–º–∞—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
    // });

    const mailOptions = {
      from: "too2006@mail.ru",
      to: "ib.invoices@kaspi.kz",
      // to: "erb0_01@mail.ru",
      subject: "kaspi.xlsx",
      text: "–¢–û–û '–°–∞–π—Ä–∞–º –¢–∞–∑–∞–ª—ã–∫'",
      attachments: [
        {
          filename: "kaspi.xlsx",
          path: filePath,
        },
      ],
    };
    // const { default: pTimeout } = await import("p-timeout");
    // console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º 300000 –º—Å");
    // const info = await pTimeout(transporter.sendMail(mailOptions), 300000);

    const info = await transporter.sendMail(mailOptions);
    console.log("–ü–∏—Å—å–º–æ —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", info.response);
    ctx.telegram.sendMessage(
      chatId,
      `‚úÖ –ü–∏—Å—å–º–æ —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n${info.response}`
    );
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—á—Ç—ã: ${error}`);
  }
}

async function main(chatId, conection, ctx) {
  try {
    const data = await executeQuery(chatId, conection, ctx);
    const filePath = createExcelFile(data, chatId, ctx);
    console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ Kaspi —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel —É—Å–ø–µ—à–Ω–æ!");
    await sendEmail(filePath, chatId, ctx);
  } catch (err) {
    console.error(err.message);
  }
}

module.exports = {
  executeQuery,
  createExcelFile,
  sendEmail,
  main,
};
